# -*- coding: utf-8 -*-
"""FGA kelompok 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uUp77qp9Hv1Mh4eLL_QWj4TY4AGwXv_1
"""

# Importing Library

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn
import warnings
import math

"""### DATA EXPLORATION"""

df = pd.read_csv('Clean_Dataset.csv')

df

df.airline.value_counts()

df.source_city.value_counts()

df.destination_city.value_counts()

df.departure_time.value_counts()

df.arrival_time.value_counts()

df.stops.value_counts()

df['class'].value_counts()

df['duration'].min()

df['duration'].max()

df['duration'].median()

"""### PREPROCESSING DATA"""

# Dropping (Unnamed: 0 and flight)

df = df.drop(['Unnamed: 0', 'flight'], axis = 1)

# Turning 'class' into binary

df['class'] = df['class'].map({'Economy': 0, 'Business': 1})

# Turning stop into numerical

df['stops'] = pd.factorize(df['stops'])[0]

# One hot encode

df = df.join(pd.get_dummies(df.airline, prefix='airline', dtype=int)).drop('airline', axis=1)
df = df.join(pd.get_dummies(df.source_city, prefix='source', dtype=int)).drop('source_city', axis=1)
df = df.join(pd.get_dummies(df.destination_city, prefix='destination', dtype=int)).drop('destination_city', axis=1)
df = df.join(pd.get_dummies(df.arrival_time, prefix='arrival', dtype=int)).drop('arrival_time', axis=1)
df = df.join(pd.get_dummies(df.departure_time, prefix='departure', dtype=int)).drop('departure_time', axis=1)

df

df.info()

"""### TRAINING REGRESSION MODEL"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor

X, y = df.drop('price', axis=1), df['price']

# Using 20% data for testing data and 80% data used for training

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Data Modeling
reg = RandomForestRegressor(n_jobs=-1)

reg.fit(X_train, y_train)

"""### EVALUATING DATA"""

# R2

reg.score(X_test, y_test)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

y_pred = reg.predict(X_test)

print('MAE:', mean_absolute_error(y_test, y_pred))
print('MSE:', mean_squared_error(y_test, y_pred))
print('RMSE:', np.sqrt(mean_squared_error(y_test, y_pred)))
print('R2:', r2_score(y_test, y_pred))

plt.scatter(y_test, y_pred)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs Predicted')
plt.show()

df.price.describe()

# Most Important Features

importances = dict(zip(reg.feature_names_in_, reg.feature_importances_))
sorted_importances = dict(sorted(importances.items(), key=lambda x: x[1], reverse=True))

sorted_importances

# Most Important Features

plt.figure(figsize = (10,6))
top_importances = sorted_importances[:10]
plt.bar([x[0] for x in sorted_importances], [x[1] for x in sorted_importances])
plt.xticks(rotation=90)
plt.show()

